const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/v1';

// Testar com empresa real
async function testRealCompanyUpdate() {
  console.log('üè¢ ===== TESTANDO ATUALIZA√á√ÉO COM EMPRESA REAL =====\n');

  try {
    // 1. Fazer login
    console.log('1Ô∏è‚É£ Fazendo login...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'test@example.com',
      password: 'password123'
    });

    const { access_token } = loginResponse.data;
    console.log('‚úÖ Login realizado com sucesso');

    // 2. Usar o ID real que voc√™ mencionou
    const companyId = '38cb9c40-ae23-4a12-ba60-ec216c6d4905';
    console.log('Company ID:', companyId);

    // 3. Dados exatos que voc√™ mostrou
    const updateData = {
      name: 'RESTACK',
      phone: '41992021603',
      address: 'Rua Professor Pedro Viriato Parigot de Souza',
      logoPath: '',
      letterheadPath: '',
      active: true
    };

    console.log('\n2Ô∏è‚É£ Dados para atualiza√ß√£o:');
    console.log(JSON.stringify(updateData, null, 2));

    // 4. Fazer requisi√ß√£o de atualiza√ß√£o
    console.log('\n3Ô∏è‚É£ Fazendo requisi√ß√£o de atualiza√ß√£o...');
    console.log('URL:', `${API_BASE_URL}/companies/${companyId}`);
    
    try {
      const updateResponse = await axios.patch(`${API_BASE_URL}/companies/${companyId}`, updateData, {
        headers: {
          'Authorization': `Bearer ${access_token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚úÖ Empresa atualizada com sucesso!');
      console.log('Status:', updateResponse.status);
      console.log('Resposta:', JSON.stringify(updateResponse.data, null, 2));

      // 5. Verificar se a atualiza√ß√£o foi persistida
      console.log('\n4Ô∏è‚É£ Verificando se a atualiza√ß√£o foi persistida...');
      const verifyResponse = await axios.get(`${API_BASE_URL}/companies`, {
        headers: {
          'Authorization': `Bearer ${access_token}`
        }
      });

      console.log('Empresas ap√≥s atualiza√ß√£o:', verifyResponse.data.length);
      if (verifyResponse.data.length > 0) {
        const updatedCompany = verifyResponse.data[0].company || verifyResponse.data[0];
        console.log('Dados da empresa ap√≥s atualiza√ß√£o:', updatedCompany);
        
        // Verificar se os dados foram realmente atualizados
        console.log('\n5Ô∏è‚É£ Verificando se os dados foram realmente atualizados...');
        console.log('Nome atualizado:', updatedCompany.name === updateData.name ? '‚úÖ' : '‚ùå');
        console.log('Telefone atualizado:', updatedCompany.phone === updateData.phone ? '‚úÖ' : '‚ùå');
        console.log('Endere√ßo atualizado:', updatedCompany.address === updateData.address ? '‚úÖ' : '‚ùå');
      }

    } catch (updateError) {
      console.error('‚ùå Erro na atualiza√ß√£o:');
      console.error('Status:', updateError.response?.status);
      console.error('Dados:', updateError.response?.data);
      
      if (updateError.response?.status === 403) {
        console.log('\nüîç An√°lise do erro 403:');
        console.log('O usu√°rio n√£o tem permiss√£o para atualizar esta empresa');
        console.log('Isso indica que o CompanyGuard est√° funcionando, mas o usu√°rio n√£o tem v√≠nculo com a empresa');
        console.log('Para resolver:');
        console.log('1. Verificar se o usu√°rio tem uma membership com esta empresa');
        console.log('2. Ou usar um usu√°rio que tem permiss√£o para esta empresa');
      } else if (updateError.response?.status === 404) {
        console.log('\nüîç An√°lise do erro 404:');
        console.log('A empresa n√£o foi encontrada');
      } else if (updateError.response?.status === 500) {
        console.log('\nüîç An√°lise do erro 500:');
        console.log('Erro interno do servidor');
      }
    }

    console.log('\nüéâ ===== TESTE CONCLU√çDO =====');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
    }
  }
}

// Executar o teste
testRealCompanyUpdate();
